import random
from collections import defaultdict

def read_names(https://raw.githubusercontent.com/adinmir/Bigram-Name-Generator/main/path/to/names.txt):
    with open(https://raw.githubusercontent.com/adinmir/Bigram-Name-Generator/main/path/to/names.txt, 'r') as file:
        names = [name.strip() for name in names.readlines()]
    return names

def build_bigram_model(names):
    bigram_model = defaultdict(int)
    total_count = 0
    
    for name in names:
        name = '^' + name + '$'  # adding start and end symbols to the name
        for i in range(len(name) - 1):
            bigram = name[i:i+2]
            bigram_model[bigram] += 1
            total_count += 1
    
    for bigram in bigram_model:
        bigram_model[bigram] /= total_count  # computing the bigram probabilities
    
    return bigram_model

def generate_name(bigram_model):
    name = ''
    current_bigram = random.choice(list(bigram_model.keys()))
    
    while current_bigram[-1] != '$':
        name += current_bigram[1]
        candidates = [bigram[1] for bigram in bigram_model if bigram.startswith(current_bigram[1])]
        if len(candidates) == 0:
            break
        next_letter = random.choice(candidates)
        current_bigram = current_bigram[1] + next_letter
    
    return name

def print_bigram_probabilities(bigram_model):
    print("Bigram Probabilities:")
    for bigram, probability in bigram_model.items():
        print(f"{bigram}: {probability}")

# Reading data from the file
names = read_names("names.txt")

# Building the bigram model
bigram_model = build_bigram_model(names)

# Generating a new name
new_name = generate_name(bigram_model)
print("Generated Name:", new_name)

# Printing the bigram probabilities
print_bigram_probabilities(bigram_model)
